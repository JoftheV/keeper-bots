{
  "address": "0xa0EC2A2489D57CD8385A565F38168cC539586B07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapRouter",
          "name": "uniswapSwapRouter_",
          "type": "address"
        },
        {
          "internalType": "contract IPancakeSwapRouter",
          "name": "pcsSwapRouter_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApproveFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "DeadlinePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "InvalidCallbackSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "InvalidSwapEnd",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "InvalidSwapStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Underflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PCS_DEPLOYER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PCS_ROUTER",
      "outputs": [
        {
          "internalType": "contract IPancakeSwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER",
      "outputs": [
        {
          "internalType": "contract IUniswapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum LiquidityProvider",
              "name": "liquidityProvider",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "Token",
              "name": "tokenToReceiveFromConverter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "minIncome",
              "type": "int256"
            },
            {
              "internalType": "Token",
              "name": "tokenToSendToConverter",
              "type": "address"
            },
            {
              "internalType": "contract IAbstractTokenConverter",
              "name": "converter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenConverterOperator.ConversionParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "convert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "pancakeV3SwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3SwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9be552c6ec381ec5a8f912745a3035c7e474568260e02978795f27e0cf8a53d1",
  "receipt": {
    "to": null,
    "from": "0x55A9f5374Af30E3045FB491f1da3C2E8a74d168D",
    "contractAddress": "0xa0EC2A2489D57CD8385A565F38168cC539586B07",
    "transactionIndex": 80,
    "gasUsed": "1634151",
    "logsBloom": "0x
    "blockHash": "0x832222af4ae96e425b70e9236b79436f1dcb4f8439613bd3406d098db3c9bb31",
    "transactionHash": "0x9be552c6ec381ec5a8f912745a3035c7e474568260e02978795f27e0cf8a53d1",
    "logs": [],
    "blockNumber": 40406787,
    "cumulativeGasUsed": "10542858",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2", "0x13f4EA83D0bd40E75C8222255bc855a974568Dd4"],
  "numDeployments": 1,
  "solcInputHash": "9c73b88090b7b6edf3df452558ecb0da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"uniswapSwapRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"pcsSwapRouter_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"DeadlinePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"InvalidCallbackSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"InvalidSwapEnd\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"InvalidSwapStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PCS_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCS_ROUTER\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum LiquidityProvider\",\"name\":\"liquidityProvider\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"tokenToReceiveFromConverter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"minIncome\",\"type\":\"int256\"},{\"internalType\":\"Token\",\"name\":\"tokenToSendToConverter\",\"type\":\"address\"},{\"internalType\":\"contract IAbstractTokenConverter\",\"name\":\"converter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenConverterOperator.ConversionParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Expects a reversed (exact output) path, i.e. the path starting with the token   that it _sends_ to TokenConverter and ends with the token that it _receives_ from   TokenConverter, e.g. if TokenConverter has BTC and wants USDT, the path should be   USDT->(TokenB)->(TokenC)->...->BTC. This contract will then:     1. Compute the amount of USDT required for the conversion     2. Flash-swap TokenB to USDT (`tokenToSendToConverter`)     3. Use TokenConverter to convert USDT to BTC (`tokenToReceiveFromConverter`)     4. Swap some portion of BTC to an exact amount of TokenB (`tokenToPay`)     5. Repay for the swap in TokenB     6. Transfer the rest of BTC to the caller   The exact output converter differs from an exact input version in that it sends the   income in `tokenToReceiveFromConverter` to the beneficiary, while an exact input   version would send the income in `tokenToSendToConverter`. The former is supposedly   a bit more efficient since there's no slippage associated with the income conversion.\",\"errors\":{\"InsufficientLiquidity(uint256,uint256)\":[{\"params\":{\"actual\":\"Actual amount of tokens\",\"expected\":\"Expected amount of tokens\"}}],\"InvalidCallbackSender(address,address)\":[{\"params\":{\"actual\":\"Actual callback sender\",\"expected\":\"Expected callback sender (pool address computed based on the pool key)\"}}],\"InvalidSwapEnd(address,address)\":[{\"params\":{\"actual\":\"Provided swap path end\",\"expected\":\"Expected swap path end\"}}],\"InvalidSwapStart(address,address)\":[{\"params\":{\"actual\":\"Provided swap path start\",\"expected\":\"Expected swap path start\"}}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"pcsSwapRouter_\":\"PancakeSwap SmartRouter contract\",\"uniswapSwapRouter_\":\"Uniswap SwapRouter contract\"}},\"convert((uint8,address,address,uint256,int256,address,address,bytes,uint256))\":{\"params\":{\"params\":\"Conversion parameters\"}},\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"params\":{\"amount0Delta\":\"Amount of pool's token0 to repay for the flash swap (negative if no need to repay this token)\",\"amount1Delta\":\"Amount of pool's token1 to repay for the flash swap (negative if no need to repay this token)\",\"data\":\"Callback data containing an Envelope structure\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"params\":{\"amount0Delta\":\"Amount of pool's token0 to repay for the flash swap (negative if no need to repay this token)\",\"amount1Delta\":\"Amount of pool's token1 to repay for the flash swap (negative if no need to repay this token)\",\"data\":\"Callback data containing an Envelope structure\"}}},\"title\":\"TokenConverterOperator\",\"version\":1},\"userdoc\":{\"errors\":{\"ApproveFailed()\":[{\"notice\":\"Thrown if a contract is unable to approve a transfer\"}],\"DeadlinePassed(uint256,uint256)\":[{\"notice\":\"Thrown if the deadline has passed\"}],\"EmptySwap()\":[{\"notice\":\"Thrown if the swap callback is called with unexpected or zero amount of tokens\"}],\"InsufficientLiquidity(uint256,uint256)\":[{\"notice\":\"Thrown if the amount of to receive from TokenConverter is less than expected\"}],\"InvalidCallbackSender(address,address)\":[{\"notice\":\"Thrown if operation callback is called by a non-PancakeSwap contract\"}],\"InvalidSwapEnd(address,address)\":[{\"notice\":\"Thrown if the provided swap path end does not correspond to the expected one\"}],\"InvalidSwapStart(address,address)\":[{\"notice\":\"Thrown if the provided swap path start does not correspond to the expected one\"}],\"Overflow()\":[{\"notice\":\"Thrown on math overflow\"}],\"Underflow()\":[{\"notice\":\"Thrown on math underflow\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"kind\":\"user\",\"methods\":{\"PCS_DEPLOYER()\":{\"notice\":\"PancakeSwap deployer contract\"},\"PCS_ROUTER()\":{\"notice\":\"PancakeSwap SmartRouter contract\"},\"UNISWAP_FACTORY()\":{\"notice\":\"Uniswap factory contract\"},\"UNISWAP_ROUTER()\":{\"notice\":\"Uniswap SwapRouter contract\"},\"convert((uint8,address,address,uint256,int256,address,address,bytes,uint256))\":{\"notice\":\"Converts tokens in a TokenConverter using a flash swap\"},\"pancakeV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Callback called by PancakeSwap pool during flash swap conversion\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Callback called by PancakeSwap pool during flash swap conversion\"}},\"notice\":\"Converts tokens in a TokenConverter using an exact-output flash swap\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/operators/TokenConverterOperator.sol\":\"TokenConverterOperator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IPancakeV3PoolActions#swap\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\ninterface IPancakeV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\n    function pancakeV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x247e5e6d9c311aa37350fa8298595c83789ac3ba2e2cde3cc73769e1b21a93f8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title AccessControlledV8\\n * @author Venus\\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\\n */\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dcf283925f4dddc23ca0ee71d2cb96a9dd6e4cf08061b69fde1697ea39dc514\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/ResilientOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2022 Venus\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/VBep20Interface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\nimport \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\n\\n/**\\n * @title ResilientOracle\\n * @author Venus\\n * @notice The Resilient Oracle is the main contract that the protocol uses to fetch prices of assets.\\n * \\n * DeFi protocols are vulnerable to price oracle failures including oracle manipulation and incorrectly\\n * reported prices. If only one oracle is used, this creates a single point of failure and opens a vector\\n * for attacking the protocol.\\n * \\n * The Resilient Oracle uses multiple sources and fallback mechanisms to provide accurate prices and protect\\n * the protocol from oracle attacks. Currently it includes integrations with Chainlink, Pyth, Binance Oracle\\n * and TWAP (Time-Weighted Average Price) oracles. TWAP uses PancakeSwap as the on-chain price source.\\n * \\n * For every market (vToken) we configure the main, pivot and fallback oracles. The oracles are configured per \\n * vToken's underlying asset address. The main oracle oracle is the most trustworthy price source, the pivot \\n * oracle is used as a loose sanity checker and the fallback oracle is used as a backup price source. \\n * \\n * To validate prices returned from two oracles, we use an upper and lower bound ratio that is set for every\\n * market. The upper bound ratio represents the deviation between reported price (the price that\\u2019s being\\n * validated) and the anchor price (the price we are validating against) above which the reported price will\\n * be invalidated. The lower bound ratio presents the deviation between reported price and anchor price below\\n * which the reported price will be invalidated. So for oracle price to be considered valid the below statement\\n * should be true:\\n\\n```\\nanchorRatio = anchorPrice/reporterPrice\\nisValid = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio\\n```\\n\\n * In most cases, Chainlink is used as the main oracle, TWAP or Pyth oracles are used as the pivot oracle depending\\n * on which supports the given market and Binance oracle is used as the fallback oracle. For some markets we may\\n * use Pyth or TWAP as the main oracle if the token price is not supported by Chainlink or Binance oracles. \\n * \\n * For a fetched price to be valid it must be positive and not stagnant. If the price is invalid then we consider the\\n * oracle to be stagnant and treat it like it's disabled.\\n */\\ncontract ResilientOracle is PausableUpgradeable, AccessControlledV8, ResilientOracleInterface {\\n    /**\\n     * @dev Oracle roles:\\n     * **main**: The most trustworthy price source\\n     * **pivot**: Price oracle used as a loose sanity checker\\n     * **fallback**: The backup source when main oracle price is invalidated\\n     */\\n    enum OracleRole {\\n        MAIN,\\n        PIVOT,\\n        FALLBACK\\n    }\\n\\n    struct TokenConfig {\\n        /// @notice asset address\\n        address asset;\\n        /// @notice `oracles` stores the oracles based on their role in the following order:\\n        /// [main, pivot, fallback],\\n        /// It can be indexed with the corresponding enum OracleRole value\\n        address[3] oracles;\\n        /// @notice `enableFlagsForOracles` stores the enabled state\\n        /// for each oracle in the same order as `oracles`\\n        bool[3] enableFlagsForOracles;\\n    }\\n\\n    uint256 public constant INVALID_PRICE = 0;\\n\\n    /// @notice Native market address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable nativeMarket;\\n\\n    /// @notice VAI address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable vai;\\n\\n    /// @notice Set this as asset address for Native token on each chain.This is the underlying for vBNB (on bsc)\\n    /// and can serve as any underlying asset of a market that supports native tokens\\n    address public constant NATIVE_TOKEN_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n    /// @notice Bound validator contract address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    BoundValidatorInterface public immutable boundValidator;\\n\\n    mapping(address => TokenConfig) private tokenConfigs;\\n\\n    event TokenConfigAdded(\\n        address indexed asset,\\n        address indexed mainOracle,\\n        address indexed pivotOracle,\\n        address fallbackOracle\\n    );\\n\\n    /// Event emitted when an oracle is set\\n    event OracleSet(address indexed asset, address indexed oracle, uint256 indexed role);\\n\\n    /// Event emitted when an oracle is enabled or disabled\\n    event OracleEnabled(address indexed asset, uint256 indexed role, bool indexed enable);\\n\\n    /**\\n     * @notice Checks whether an address is null or not\\n     */\\n    modifier notNullAddress(address someone) {\\n        if (someone == address(0)) revert(\\\"can't be zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks whether token config exists by checking whether asset is null address\\n     * @dev address can't be null, so it's suitable to be used to check the validity of the config\\n     * @param asset asset address\\n     */\\n    modifier checkTokenConfigExistence(address asset) {\\n        if (tokenConfigs[asset].asset == address(0)) revert(\\\"token config must exist\\\");\\n        _;\\n    }\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @dev nativeMarketAddress can be address(0) if on the chain we do not support native market\\n    ///      (e.g vETH on ethereum would not be supported, only vWETH)\\n    /// @param nativeMarketAddress The address of a native market (for bsc it would be vBNB address)\\n    /// @param vaiAddress The address of the VAI token (if there is VAI on the deployed chain).\\n    ///          Set to address(0) of VAI is not existent.\\n    /// @param _boundValidator Address of the bound validator contract\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address nativeMarketAddress,\\n        address vaiAddress,\\n        BoundValidatorInterface _boundValidator\\n    ) notNullAddress(address(_boundValidator)) {\\n        nativeMarket = nativeMarketAddress;\\n        vai = vaiAddress;\\n        boundValidator = _boundValidator;\\n\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the contract admin and sets the BoundValidator contract address\\n     * @param accessControlManager_ Address of the access control manager contract\\n     */\\n    function initialize(address accessControlManager_) external initializer {\\n        __AccessControlled_init(accessControlManager_);\\n        __Pausable_init();\\n    }\\n\\n    /**\\n     * @notice Pauses oracle\\n     * @custom:access Only Governance\\n     */\\n    function pause() external {\\n        _checkAccessAllowed(\\\"pause()\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses oracle\\n     * @custom:access Only Governance\\n     */\\n    function unpause() external {\\n        _checkAccessAllowed(\\\"unpause()\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Batch sets token configs\\n     * @param tokenConfigs_ Token config array\\n     * @custom:access Only Governance\\n     * @custom:error Throws a length error if the length of the token configs array is 0\\n     */\\n    function setTokenConfigs(TokenConfig[] memory tokenConfigs_) external {\\n        if (tokenConfigs_.length == 0) revert(\\\"length can't be 0\\\");\\n        uint256 numTokenConfigs = tokenConfigs_.length;\\n        for (uint256 i; i < numTokenConfigs; ) {\\n            setTokenConfig(tokenConfigs_[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets oracle for a given asset and role.\\n     * @dev Supplied asset **must** exist and main oracle may not be null\\n     * @param asset Asset address\\n     * @param oracle Oracle address\\n     * @param role Oracle role\\n     * @custom:access Only Governance\\n     * @custom:error Null address error if main-role oracle address is null\\n     * @custom:error NotNullAddress error is thrown if asset address is null\\n     * @custom:error TokenConfigExistance error is thrown if token config is not set\\n     * @custom:event Emits OracleSet event with asset address, oracle address and role of the oracle for the asset\\n     */\\n    function setOracle(\\n        address asset,\\n        address oracle,\\n        OracleRole role\\n    ) external notNullAddress(asset) checkTokenConfigExistence(asset) {\\n        _checkAccessAllowed(\\\"setOracle(address,address,uint8)\\\");\\n        if (oracle == address(0) && role == OracleRole.MAIN) revert(\\\"can't set zero address to main oracle\\\");\\n        tokenConfigs[asset].oracles[uint256(role)] = oracle;\\n        emit OracleSet(asset, oracle, uint256(role));\\n    }\\n\\n    /**\\n     * @notice Enables/ disables oracle for the input asset. Token config for the input asset **must** exist\\n     * @dev Configuration for the asset **must** already exist and the asset cannot be 0 address\\n     * @param asset Asset address\\n     * @param role Oracle role\\n     * @param enable Enabled boolean of the oracle\\n     * @custom:access Only Governance\\n     * @custom:error NotNullAddress error is thrown if asset address is null\\n     * @custom:error TokenConfigExistance error is thrown if token config is not set\\n     */\\n    function enableOracle(\\n        address asset,\\n        OracleRole role,\\n        bool enable\\n    ) external notNullAddress(asset) checkTokenConfigExistence(asset) {\\n        _checkAccessAllowed(\\\"enableOracle(address,uint8,bool)\\\");\\n        tokenConfigs[asset].enableFlagsForOracles[uint256(role)] = enable;\\n        emit OracleEnabled(asset, uint256(role), enable);\\n    }\\n\\n    /**\\n     * @notice Updates the TWAP pivot oracle price.\\n     * @dev This function should always be called before calling getUnderlyingPrice\\n     * @param vToken vToken address\\n     */\\n    function updatePrice(address vToken) external override {\\n        address asset = _getUnderlyingAsset(vToken);\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracle != address(0) && pivotOracleEnabled) {\\n            //if pivot oracle is not TwapOracle it will revert so we need to catch the revert\\n            try TwapInterface(pivotOracle).updateTwap(asset) {} catch {}\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the pivot oracle price. Currently using TWAP\\n     * @dev This function should always be called before calling getPrice\\n     * @param asset asset address\\n     */\\n    function updateAssetPrice(address asset) external {\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracle != address(0) && pivotOracleEnabled) {\\n            //if pivot oracle is not TwapOracle it will revert so we need to catch the revert\\n            try TwapInterface(pivotOracle).updateTwap(asset) {} catch {}\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets token config by asset address\\n     * @param asset asset address\\n     * @return tokenConfig Config for the asset\\n     */\\n    function getTokenConfig(address asset) external view returns (TokenConfig memory) {\\n        return tokenConfigs[asset];\\n    }\\n\\n    /**\\n     * @notice Gets price of the underlying asset for a given vToken. Validation flow:\\n     * - Check if the oracle is paused globally\\n     * - Validate price from main oracle against pivot oracle\\n     * - Validate price from fallback oracle against pivot oracle if the first validation failed\\n     * - Validate price from main oracle against fallback oracle if the second validation failed\\n     * In the case that the pivot oracle is not available but main price is available and validation is successful,\\n     * main oracle price is returned.\\n     * @param vToken vToken address\\n     * @return price USD price in scaled decimal places.\\n     * @custom:error Paused error is thrown when resilent oracle is paused\\n     * @custom:error Invalid resilient oracle price error is thrown if fetched prices from oracle is invalid\\n     */\\n    function getUnderlyingPrice(address vToken) external view override returns (uint256) {\\n        if (paused()) revert(\\\"resilient oracle is paused\\\");\\n\\n        address asset = _getUnderlyingAsset(vToken);\\n        return _getPrice(asset);\\n    }\\n\\n    /**\\n     * @notice Gets price of the asset\\n     * @param asset asset address\\n     * @return price USD price in scaled decimal places.\\n     * @custom:error Paused error is thrown when resilent oracle is paused\\n     * @custom:error Invalid resilient oracle price error is thrown if fetched prices from oracle is invalid\\n     */\\n    function getPrice(address asset) external view override returns (uint256) {\\n        if (paused()) revert(\\\"resilient oracle is paused\\\");\\n        return _getPrice(asset);\\n    }\\n\\n    /**\\n     * @notice Sets/resets single token configs.\\n     * @dev main oracle **must not** be a null address\\n     * @param tokenConfig Token config struct\\n     * @custom:access Only Governance\\n     * @custom:error NotNullAddress is thrown if asset address is null\\n     * @custom:error NotNullAddress is thrown if main-role oracle address for asset is null\\n     * @custom:event Emits TokenConfigAdded event when the asset config is set successfully by the authorized account\\n     */\\n    function setTokenConfig(\\n        TokenConfig memory tokenConfig\\n    ) public notNullAddress(tokenConfig.asset) notNullAddress(tokenConfig.oracles[uint256(OracleRole.MAIN)]) {\\n        _checkAccessAllowed(\\\"setTokenConfig(TokenConfig)\\\");\\n\\n        tokenConfigs[tokenConfig.asset] = tokenConfig;\\n        emit TokenConfigAdded(\\n            tokenConfig.asset,\\n            tokenConfig.oracles[uint256(OracleRole.MAIN)],\\n            tokenConfig.oracles[uint256(OracleRole.PIVOT)],\\n            tokenConfig.oracles[uint256(OracleRole.FALLBACK)]\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets oracle and enabled status by asset address\\n     * @param asset asset address\\n     * @param role Oracle role\\n     * @return oracle Oracle address based on role\\n     * @return enabled Enabled flag of the oracle based on token config\\n     */\\n    function getOracle(address asset, OracleRole role) public view returns (address oracle, bool enabled) {\\n        oracle = tokenConfigs[asset].oracles[uint256(role)];\\n        enabled = tokenConfigs[asset].enableFlagsForOracles[uint256(role)];\\n    }\\n\\n    function _getPrice(address asset) internal view returns (uint256) {\\n        uint256 pivotPrice = INVALID_PRICE;\\n\\n        // Get pivot oracle price, Invalid price if not available or error\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracleEnabled && pivotOracle != address(0)) {\\n            try OracleInterface(pivotOracle).getPrice(asset) returns (uint256 pricePivot) {\\n                pivotPrice = pricePivot;\\n            } catch {}\\n        }\\n\\n        // Compare main price and pivot price, return main price and if validation was successful\\n        // note: In case pivot oracle is not available but main price is available and\\n        // validation is successful, the main oracle price is returned.\\n        (uint256 mainPrice, bool validatedPivotMain) = _getMainOraclePrice(\\n            asset,\\n            pivotPrice,\\n            pivotOracleEnabled && pivotOracle != address(0)\\n        );\\n        if (mainPrice != INVALID_PRICE && validatedPivotMain) return mainPrice;\\n\\n        // Compare fallback and pivot if main oracle comparision fails with pivot\\n        // Return fallback price when fallback price is validated successfully with pivot oracle\\n        (uint256 fallbackPrice, bool validatedPivotFallback) = _getFallbackOraclePrice(asset, pivotPrice);\\n        if (fallbackPrice != INVALID_PRICE && validatedPivotFallback) return fallbackPrice;\\n\\n        // Lastly compare main price and fallback price\\n        if (\\n            mainPrice != INVALID_PRICE &&\\n            fallbackPrice != INVALID_PRICE &&\\n            boundValidator.validatePriceWithAnchorPrice(asset, mainPrice, fallbackPrice)\\n        ) {\\n            return mainPrice;\\n        }\\n\\n        revert(\\\"invalid resilient oracle price\\\");\\n    }\\n\\n    /**\\n     * @notice Gets a price for the provided asset\\n     * @dev This function won't revert when price is 0, because the fallback oracle may still be\\n     * able to fetch a correct price\\n     * @param asset asset address\\n     * @param pivotPrice Pivot oracle price\\n     * @param pivotEnabled If pivot oracle is not empty and enabled\\n     * @return price USD price in scaled decimals\\n     * e.g. asset decimals is 8 then price is returned as 10**18 * 10**(18-8) = 10**28 decimals\\n     * @return pivotValidated Boolean representing if the validation of main oracle price\\n     * and pivot oracle price were successful\\n     * @custom:error Invalid price error is thrown if main oracle fails to fetch price of the asset\\n     * @custom:error Invalid price error is thrown if main oracle is not enabled or main oracle\\n     * address is null\\n     */\\n    function _getMainOraclePrice(\\n        address asset,\\n        uint256 pivotPrice,\\n        bool pivotEnabled\\n    ) internal view returns (uint256, bool) {\\n        (address mainOracle, bool mainOracleEnabled) = getOracle(asset, OracleRole.MAIN);\\n        if (mainOracleEnabled && mainOracle != address(0)) {\\n            try OracleInterface(mainOracle).getPrice(asset) returns (uint256 mainOraclePrice) {\\n                if (!pivotEnabled) {\\n                    return (mainOraclePrice, true);\\n                }\\n                if (pivotPrice == INVALID_PRICE) {\\n                    return (mainOraclePrice, false);\\n                }\\n                return (\\n                    mainOraclePrice,\\n                    boundValidator.validatePriceWithAnchorPrice(asset, mainOraclePrice, pivotPrice)\\n                );\\n            } catch {\\n                return (INVALID_PRICE, false);\\n            }\\n        }\\n\\n        return (INVALID_PRICE, false);\\n    }\\n\\n    /**\\n     * @dev This function won't revert when the price is 0 because getPrice checks if price is > 0\\n     * @param asset asset address\\n     * @return price USD price in 18 decimals\\n     * @return pivotValidated Boolean representing if the validation of fallback oracle price\\n     * and pivot oracle price were successfull\\n     * @custom:error Invalid price error is thrown if fallback oracle fails to fetch price of the asset\\n     * @custom:error Invalid price error is thrown if fallback oracle is not enabled or fallback oracle\\n     * address is null\\n     */\\n    function _getFallbackOraclePrice(address asset, uint256 pivotPrice) private view returns (uint256, bool) {\\n        (address fallbackOracle, bool fallbackEnabled) = getOracle(asset, OracleRole.FALLBACK);\\n        if (fallbackEnabled && fallbackOracle != address(0)) {\\n            try OracleInterface(fallbackOracle).getPrice(asset) returns (uint256 fallbackOraclePrice) {\\n                if (pivotPrice == INVALID_PRICE) {\\n                    return (fallbackOraclePrice, false);\\n                }\\n                return (\\n                    fallbackOraclePrice,\\n                    boundValidator.validatePriceWithAnchorPrice(asset, fallbackOraclePrice, pivotPrice)\\n                );\\n            } catch {\\n                return (INVALID_PRICE, false);\\n            }\\n        }\\n\\n        return (INVALID_PRICE, false);\\n    }\\n\\n    /**\\n     * @dev This function returns the underlying asset of a vToken\\n     * @param vToken vToken address\\n     * @return asset underlying asset address\\n     */\\n    function _getUnderlyingAsset(address vToken) private view notNullAddress(vToken) returns (address asset) {\\n        if (vToken == nativeMarket) {\\n            asset = NATIVE_TOKEN_ADDR;\\n        } else if (vToken == vai) {\\n            asset = vai;\\n        } else {\\n            asset = VBep20Interface(vToken).underlying();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x005e52885b8f7935dbccb1c87847229a9a2bfb66fd75fe200c9ec6f8a5d7a0e9\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/oracle/contracts/interfaces/VBep20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface VBep20Interface is IERC20Metadata {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6e71c3df86501df5c0e4bace1333c0c91f9f9cced252a54fb99eeda219b789d5\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/Interfaces/IConverterNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport { IAbstractTokenConverter } from \\\"../TokenConverter/IAbstractTokenConverter.sol\\\";\\n\\n/**\\n * @title IConverterNetwork\\n * @author Venus\\n * @notice Interface implemented by `ConverterNetwork`.\\n */\\ninterface IConverterNetwork {\\n    /// @notice Adds new converter to the array\\n    /// @param _tokenConverter Address of the token converter\\n    function addTokenConverter(IAbstractTokenConverter _tokenConverter) external;\\n\\n    /// @notice Removes converter from the array\\n    /// @param _tokenConverter Address of the token converter\\n    function removeTokenConverter(IAbstractTokenConverter _tokenConverter) external;\\n\\n    /// @notice Used to get the array of converters supporting conversions, arranged in descending order based on token balances\\n    /// @param _tokenAddressIn Address of tokenIn\\n    /// @param _tokenAddressOut Address of tokenOut\\n    /// @return converters Array of the conveters on the basis of the tokens pair\\n    /// @return convertersBalance Array of balances with respect to token out\\n    function findTokenConverters(address _tokenAddressIn, address _tokenAddressOut)\\n        external\\n        returns (address[] memory converters, uint256[] memory convertersBalance);\\n\\n    /// @notice Used to get the array of converters supporting conversions, arranged in descending order based on token balances\\n    /// @param _tokenAddressIn Address of tokenIn\\n    /// @param _tokenAddressOut Address of tokenOut\\n    /// @return converters Array of the conveters on the basis of the tokens pair\\n    /// @return convertersBalance Array of balances with respect to token out\\n    function findTokenConvertersForConverters(address _tokenAddressIn, address _tokenAddressOut)\\n        external\\n        returns (address[] memory converters, uint256[] memory convertersBalance);\\n\\n    /// @notice This function returns the array containing all the converters addresses\\n    /// @return Array containing all the converters addresses\\n    function getAllConverters() external view returns (IAbstractTokenConverter[] memory);\\n\\n    /// @notice This function checks for given address is converter or not\\n    /// @param _tokenConverter Address of the token converter\\n    /// @return boolean true if given address is converter otherwise false\\n    function isTokenConverter(address _tokenConverter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd9a747f176d9b9de220331b87ed711cc2bd594a118b538a35f3c47060bff7a8b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/TokenConverter/IAbstractTokenConverter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport { ResilientOracle } from \\\"@venusprotocol/oracle/contracts/ResilientOracle.sol\\\";\\nimport { IConverterNetwork } from \\\"../Interfaces/IConverterNetwork.sol\\\";\\n\\n/// @notice Interface for AbstractTokenConverter\\n/// @custom:security-contact https://github.com/VenusProtocol/protocol-reserve#discussion\\ninterface IAbstractTokenConverter {\\n    /// @notice This enum define the all possible ways of conversion can happen\\n    enum ConversionAccessibility {\\n        NONE, // Conversion is disable for the pair\\n        ALL, // Conversion is enable for private conversion and users\\n        ONLY_FOR_CONVERTERS, // Conversion is enable only for private conversion\\n        ONLY_FOR_USERS // Conversion is enable only for users\\n    }\\n\\n    /// @notice This struct represents the configuration for a token conversion.\\n    struct ConversionConfig {\\n        /// incentive on conversion of tokens in mantissa i.e 10% incentive would be 0.1 * 1e18\\n        uint256 incentive;\\n        /// enable or disable conversion for users or converters or both or none\\n        ConversionAccessibility conversionAccess;\\n    }\\n\\n    /// @notice Pause conversion of tokens\\n    function pauseConversion() external;\\n\\n    /// @notice Resume conversion of tokens.\\n    function resumeConversion() external;\\n\\n    /// @notice Sets a new price oracle\\n    /// @param priceOracle_ Address of the new price oracle to set\\n    function setPriceOracle(ResilientOracle priceOracle_) external;\\n\\n    /// @notice Set the configuration for new or existing convert pair\\n    /// @param tokenAddressIn Address of tokenIn\\n    /// @param tokenAddressOut Address of tokenOut\\n    /// @param conversionConfig ConversionConfig config details to update\\n    function setConversionConfig(\\n        address tokenAddressIn,\\n        address tokenAddressOut,\\n        ConversionConfig calldata conversionConfig\\n    ) external;\\n\\n    /// @notice Convert exact amount of tokenAddressIn for tokenAddressOut\\n    /// @dev Method does not support deflationary tokens transfer\\n    /// @param amountInMantissa Amount of tokenAddressIn\\n    /// @param amountOutMinMantissa Min amount of tokenAddressOut required as output\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after convert\\n    /// @param to Address of the tokenAddressOut receiver\\n    function convertExactTokens(\\n        uint256 amountInMantissa,\\n        uint256 amountOutMinMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut,\\n        address to\\n    ) external returns (uint256 actualAmountIn, uint256 actualAmountOut);\\n\\n    /// @notice Convert tokens for tokenAddressIn for exact amount of tokenAddressOut\\n    /// @dev Method does not support deflationary tokens transfer\\n    /// @param amountInMaxMantissa Max amount of tokenAddressIn\\n    /// @param amountOutMantissa Amount of tokenAddressOut required as output\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after convert\\n    /// @param to Address of the tokenAddressOut receiver\\n    function convertForExactTokens(\\n        uint256 amountInMaxMantissa,\\n        uint256 amountOutMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut,\\n        address to\\n    ) external returns (uint256 actualAmountIn, uint256 actualAmountOut);\\n\\n    /// @notice Convert exact amount of tokenAddressIn for tokenAddressOut\\n    /// @param amountInMantissa Amount of tokenAddressIn\\n    /// @param amountOutMinMantissa Min amount of tokenAddressOut required as output\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after convert\\n    /// @param to Address of the tokenAddressOut receiver\\n    function convertExactTokensSupportingFeeOnTransferTokens(\\n        uint256 amountInMantissa,\\n        uint256 amountOutMinMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut,\\n        address to\\n    ) external returns (uint256 actualAmountIn, uint256 actualAmountOut);\\n\\n    /// @notice Convert tokens for tokenAddressIn for exact amount of tokenAddressOut\\n    /// @param amountInMaxMantissa Max amount of tokenAddressIn\\n    /// @param amountOutMantissa Amount of tokenAddressOut required as output\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after convert\\n    /// @param to Address of the tokenAddressOut receiver\\n    function convertForExactTokensSupportingFeeOnTransferTokens(\\n        uint256 amountInMaxMantissa,\\n        uint256 amountOutMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut,\\n        address to\\n    ) external returns (uint256 actualAmountIn, uint256 actualAmountOut);\\n\\n    /// @notice Get the configuration for the pair of the tokens\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after conversion\\n    /// @return incentives Percentage of incentives to be distributed for the pair of tokens\\n    /// @return conversionAccess Accessibility for the pair of tokens\\n    function conversionConfigurations(address tokenAddressIn, address tokenAddressOut)\\n        external\\n        returns (uint256 incentives, ConversionAccessibility conversionAccess);\\n\\n    /// @notice Get the address of the converterNetwork\\n    function converterNetwork() external returns (IConverterNetwork converterNetwork);\\n\\n    /// @notice To get the amount of tokenAddressOut tokens sender could receive on providing amountInMantissa tokens of tokenAddressIn\\n    /// @param amountInMantissa Amount of tokenAddressIn\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after conversion\\n    /// @return amountConvertedMantissa Amount of tokenAddressIn should be transferred after conversion\\n    /// @return amountOutMantissa Amount of the tokenAddressOut sender should receive after conversion\\n    /// @custom:error InsufficientInputAmount error is thrown when given input amount is zero\\n    /// @custom:error ConversionConfigNotEnabled is thrown when conversion is disabled or config does not exist for given pair\\n    function getUpdatedAmountOut(\\n        uint256 amountInMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut\\n    ) external returns (uint256 amountConvertedMantissa, uint256 amountOutMantissa);\\n\\n    /// @notice To get the amount of tokenAddressIn tokens sender would send on receiving amountOutMantissa tokens of tokenAddressOut\\n    /// @param amountOutMantissa Amount of tokenAddressOut user wants to receive\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after conversion\\n    /// @return amountConvertedMantissa Amount of tokenAddressOut should be transferred after conversion\\n    /// @return amountInMantissa Amount of the tokenAddressIn sender would send to contract before conversion\\n    /// @custom:error InsufficientInputAmount error is thrown when given input amount is zero\\n    /// @custom:error ConversionConfigNotEnabled is thrown when conversion is disabled or config does not exist for given pair\\n    function getUpdatedAmountIn(\\n        uint256 amountOutMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut\\n    ) external returns (uint256 amountConvertedMantissa, uint256 amountInMantissa);\\n\\n    /// @notice To get the amount of tokenAddressIn tokens sender would send on receiving amountOutMantissa tokens of tokenAddressOut\\n    /// @dev This function retrieves values without altering token prices.\\n    /// @param amountOutMantissa Amount of tokenAddressOut user wants to receive\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after conversion\\n    /// @return amountConvertedMantissa Amount of tokenAddressOut should be transferred after conversion\\n    /// @return amountInMantissa Amount of the tokenAddressIn sender would send to contract before conversion\\n    /// @custom:error InsufficientInputAmount error is thrown when given input amount is zero\\n    /// @custom:error ConversionConfigNotEnabled is thrown when conversion is disabled or config does not exist for given pair\\n    function getAmountIn(\\n        uint256 amountOutMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut\\n    ) external view returns (uint256 amountConvertedMantissa, uint256 amountInMantissa);\\n\\n    /// @notice To get the amount of tokenAddressOut tokens sender could receive on providing amountInMantissa tokens of tokenAddressIn\\n    /// @dev This function retrieves values without altering token prices.\\n    /// @param amountInMantissa Amount of tokenAddressIn\\n    /// @param tokenAddressIn Address of the token to convert\\n    /// @param tokenAddressOut Address of the token to get after conversion\\n    /// @return amountConvertedMantissa Amount of tokenAddressIn should be transferred after conversion\\n    /// @return amountOutMantissa Amount of the tokenAddressOut sender should receive after conversion\\n    /// @custom:error InsufficientInputAmount error is thrown when given input amount is zero\\n    /// @custom:error ConversionConfigNotEnabled is thrown when conversion is disabled or config does not exist for given pair\\n    function getAmountOut(\\n        uint256 amountInMantissa,\\n        address tokenAddressIn,\\n        address tokenAddressOut\\n    ) external view returns (uint256 amountConvertedMantissa, uint256 amountOutMantissa);\\n\\n    /// @notice Get the balance for specific token\\n    /// @param token Address of the token\\n    /// @return tokenBalance Balance of the token the contract has\\n    function balanceOf(address token) external view returns (uint256 tokenBalance);\\n}\\n\",\"keccak256\":\"0x7852d4f8a6dd1c80d14342f8ff2e26f723eb00c888e9a9e50a5fe8f95c59200c\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Thrown if the supplied value is 0 where it is not allowed\\nerror ZeroValueNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\\n/// @notice Checks if the provided value is nonzero, reverts otherwise\\n/// @param value_ Value to check\\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\\nfunction ensureNonzeroValue(uint256 value_) pure {\\n    if (value_ == 0) {\\n        revert ZeroValueNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xdb88e14d50dd21889ca3329d755673d022c47e8da005b6a545c7f69c2c4b7b86\",\"license\":\"BSD-3-Clause\"},\"contracts/flash-swap/ExactOutputFlashSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { IPancakeV3SwapCallback } from \\\"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\\\";\\nimport { IUniswapV3SwapCallback } from \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Token } from \\\"../util/Token.sol\\\";\\nimport { IRouter } from \\\"../third-party/interfaces/IRouter.sol\\\";\\nimport { IPool } from \\\"../third-party/interfaces/IPool.sol\\\";\\nimport { Path } from \\\"../third-party/pancakeswap-v8/Path.sol\\\";\\nimport { MIN_SQRT_RATIO, MAX_SQRT_RATIO } from \\\"../third-party/pancakeswap-v8/constants.sol\\\";\\n\\nimport { LiquidityProvider } from \\\"./common.sol\\\";\\nimport { PoolKey, getPoolKey } from \\\"./PoolAddress.sol\\\";\\nimport { FlashHandler } from \\\"./FlashHandler.sol\\\";\\n\\n/// @notice Callback data passed to the swap callback\\nstruct Envelope {\\n    /// @notice Exact-output (reversed) swap path, starting with tokenY and ending with tokenX\\n    bytes path;\\n    /// @notice Application-specific data\\n    bytes data;\\n    /// @notice Pool key of the pool that should have called the callback\\n    PoolKey poolKey;\\n}\\n\\n/// @title ExactOutputFlashSwap\\n/// @notice A base contract for exact output flash swap operations.\\n///\\n///   Upon calling _flashSwap, swaps tokenX to tokenY using a flash swap, i.e. the contract:\\n///\\n///   1. Invokes the flash swap on the first pool from the path\\n///   2. Receives tokenY from the pool\\n///   3. Calls _onMoneyReceived, which should ensure that the contract has enough tokenX\\n///      to repay the flash swap\\n///   4. Repays the flash swap with tokenX (doing the conversion if necessary)\\n///   5. Calls _onFlashCompleted\\n///\\n/// @dev This contract is abstract and should be inherited by a contract that implements\\n///   _onMoneyReceived and _onFlashCompleted. Note that in the callbacks transaction\\n///   context (sender and value) is different from the original context. The inheriting\\n///   contracts should save the original context in the application-specific data bytes\\n///   passed to the callbacks.\\nabstract contract ExactOutputFlashSwap is IPancakeV3SwapCallback, IUniswapV3SwapCallback, FlashHandler {\\n    using Path for bytes;\\n\\n    /// @notice Thrown if the swap callback is called with unexpected or zero amount of tokens\\n    error EmptySwap();\\n\\n    /// @notice Callback called by PancakeSwap pool during flash swap conversion\\n    /// @param amount0Delta Amount of pool's token0 to repay for the flash swap (negative if no need to repay this token)\\n    /// @param amount1Delta Amount of pool's token1 to repay for the flash swap (negative if no need to repay this token)\\n    /// @param data Callback data containing an Envelope structure\\n    function pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\\n        _handleSwapCallback(LiquidityProvider.PANCAKESWAP, amount0Delta, amount1Delta, data);\\n    }\\n\\n    /// @notice Callback called by PancakeSwap pool during flash swap conversion\\n    /// @param amount0Delta Amount of pool's token0 to repay for the flash swap (negative if no need to repay this token)\\n    /// @param amount1Delta Amount of pool's token1 to repay for the flash swap (negative if no need to repay this token)\\n    /// @param data Callback data containing an Envelope structure\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\\n        _handleSwapCallback(LiquidityProvider.UNISWAP, amount0Delta, amount1Delta, data);\\n    }\\n\\n    /// @dev Liquidity provider abstracted implementation of swap callback handler\\n    /// @param amount0Delta Amount of pool's token0 to repay for the flash swap (negative if no need to repay this token)\\n    /// @param amount1Delta Amount of pool's token1 to repay for the flash swap (negative if no need to repay this token)\\n    /// @param data Callback data containing an Envelope structure\\n    function _handleSwapCallback(\\n        LiquidityProvider provider,\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) internal {\\n        Envelope memory envelope = abi.decode(data, (Envelope));\\n        _verifyCallback(provider, envelope.poolKey);\\n        if (amount0Delta <= 0 && amount1Delta <= 0) {\\n            revert EmptySwap();\\n        }\\n\\n        uint256 amountToPay;\\n        Token tokenToPay;\\n        if (amount0Delta > 0) {\\n            tokenToPay = Token.wrap(envelope.poolKey.token0);\\n            amountToPay = uint256(amount0Delta);\\n        } else if (amount1Delta > 0) {\\n            tokenToPay = Token.wrap(envelope.poolKey.token1);\\n            amountToPay = uint256(amount1Delta);\\n        }\\n\\n        (Token tokenIn, uint256 maxAmountIn) = _onMoneyReceived(envelope.data);\\n\\n        if (envelope.path.hasMultiplePools()) {\\n            bytes memory remainingPath = envelope.path.skipToken();\\n            _exactOutput(\\n                provider,\\n                remainingPath,\\n                msg.sender, // repaying to the pool\\n                amountToPay,\\n                tokenIn,\\n                maxAmountIn\\n            );\\n        } else {\\n            // If the path had just one pool, tokenToPay should be tokenX, so we can just repay the debt.\\n            tokenToPay.transfer(msg.sender, amountToPay);\\n        }\\n\\n        _onFlashCompleted(envelope.data);\\n    }\\n\\n    function _exactOutput(\\n        LiquidityProvider provider,\\n        bytes memory path,\\n        address recipient,\\n        uint256 amountOut,\\n        Token tokenIn,\\n        uint256 maxAmountIn\\n    ) internal {\\n        address router = provider == LiquidityProvider.UNISWAP ? address(UNISWAP_ROUTER) : address(PCS_ROUTER);\\n\\n        tokenIn.approve(router, maxAmountIn);\\n        IRouter(router).exactOutput(\\n            IRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient, // repaying to the pool\\n                amountOut: amountOut,\\n                amountInMaximum: maxAmountIn\\n            })\\n        );\\n        tokenIn.approve(router, 0);\\n    }\\n\\n    /// @dev Initiates a flash swap\\n    /// @param amountOut Amount of tokenY to receive during the flash swap\\n    /// @param path Exact-output (reversed) swap path, starting with tokenY and ending with tokenX\\n    /// @param data Application-specific data\\n    function _flashSwap(\\n        LiquidityProvider provider,\\n        uint256 amountOut,\\n        bytes calldata path,\\n        bytes memory data\\n    ) internal {\\n        (address tokenY, address tokenB, uint24 fee) = path.decodeFirstPool();\\n        PoolKey memory poolKey = getPoolKey(tokenY, tokenB, fee);\\n        IPool pool = IPool(_computePoolAddress(provider, poolKey));\\n        bytes memory envelope = abi.encode(Envelope(path, data, poolKey));\\n\\n        bool swapZeroForOne = poolKey.token1 == tokenY;\\n        uint160 sqrtPriceLimitX96 = (swapZeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1);\\n        pool.swap(address(this), swapZeroForOne, -int256(amountOut), sqrtPriceLimitX96, envelope);\\n    }\\n}\\n\",\"keccak256\":\"0xe9b3c538f8d794581793afd5a7fa63c6a433dc63c04e4a255e64be8f65731bed\",\"license\":\"MIT\"},\"contracts/flash-swap/FlashHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { ZeroAddressNotAllowed } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\n\\nimport { LiquidityProvider } from \\\"./common.sol\\\";\\nimport { PoolKey, computePoolAddress } from \\\"./PoolAddress.sol\\\";\\nimport { Token } from \\\"../util/Token.sol\\\";\\nimport { IUniswapRouter } from \\\"../third-party/interfaces/IUniswapRouter.sol\\\";\\nimport { IPancakeSwapRouter } from \\\"../third-party/interfaces/IPancakeSwapRouter.sol\\\";\\n\\nbytes32 constant UNISWAP_POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\nbytes32 constant PCS_POOL_INIT_CODE_HASH = 0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2;\\n\\nabstract contract FlashHandler {\\n    /// @notice PancakeSwap SmartRouter contract\\n    IPancakeSwapRouter public immutable PCS_ROUTER;\\n\\n    /// @notice PancakeSwap deployer contract\\n    address public immutable PCS_DEPLOYER;\\n\\n    /// @notice Uniswap SwapRouter contract\\n    IUniswapRouter public immutable UNISWAP_ROUTER;\\n\\n    /// @notice Uniswap factory contract\\n    address public immutable UNISWAP_FACTORY;\\n\\n    /// @notice Thrown if operation callback is called by a non-PancakeSwap contract\\n    /// @param expected Expected callback sender (pool address computed based on the pool key)\\n    /// @param actual Actual callback sender\\n    error InvalidCallbackSender(address expected, address actual);\\n\\n    /// @param uniswapSwapRouter_ Uniswap SwapRouter contract\\n    /// @param pcsSwapRouter_ PancakeSwap SmartRouter contract\\n    /// @dev Either of the routers must be nonzero address\\n    constructor(IUniswapRouter uniswapSwapRouter_, IPancakeSwapRouter pcsSwapRouter_) {\\n        if (address(uniswapSwapRouter_) == address(0) && address(pcsSwapRouter_) == address(0)) {\\n            revert ZeroAddressNotAllowed();\\n        }\\n        if (address(uniswapSwapRouter_) != address(0)) {\\n            UNISWAP_ROUTER = uniswapSwapRouter_;\\n            UNISWAP_FACTORY = uniswapSwapRouter_.factory();\\n        }\\n        if (address(pcsSwapRouter_) != address(0)) {\\n            PCS_ROUTER = pcsSwapRouter_;\\n            PCS_DEPLOYER = pcsSwapRouter_.deployer();\\n        }\\n    }\\n\\n    /// @dev Called when token Y is received during a flash operation. This function has to ensure\\n    ///   that at the end of the execution the contract has enough token X to repay the flash\\n    ///   operation.\\n    ///   Note that msg.sender is the pool that called the callback, not the original caller\\n    ///   of the transaction where flash operation was invoked.\\n    /// @param data Application-specific data\\n    /// @return tokenIn Token X\\n    /// @return maxAmountIn Maximum amount of token X to be used to repay the flash operation\\n    function _onMoneyReceived(bytes memory data) internal virtual returns (Token tokenIn, uint256 maxAmountIn);\\n\\n    /// @dev Called when the flash operation is completed and was paid for. By default, does nothing.\\n    ///   Note that msg.sender is the pool that called the callback, not the original caller\\n    ///   of the transaction where flash operation was invoked.\\n    /// @param data Application-specific data\\n    // solhint-disable-next-line no-empty-blocks\\n    function _onFlashCompleted(bytes memory data) internal virtual {}\\n\\n    /// @dev Computes PancakeSwap or Uniswap pool address\\n    /// @param provider Liquidity provider (either Uniswap or PancakeSwap)\\n    /// @param poolKey PoolKey struct identifying a pool\\n    function _computePoolAddress(LiquidityProvider provider, PoolKey memory poolKey) internal view returns (address) {\\n        if (provider == LiquidityProvider.UNISWAP) {\\n            return computePoolAddress(UNISWAP_FACTORY, UNISWAP_POOL_INIT_CODE_HASH, poolKey);\\n        } else {\\n            return computePoolAddress(PCS_DEPLOYER, PCS_POOL_INIT_CODE_HASH, poolKey);\\n        }\\n    }\\n\\n    /// @dev Ensures that the caller of a callback is a legitimate PancakeSwap pool\\n    /// @param provider Liquidity provider (either Uniswap or PancakeSwap)\\n    /// @param poolKey The pool key of the pool to verify\\n    function _verifyCallback(LiquidityProvider provider, PoolKey memory poolKey) internal view {\\n        address pool = _computePoolAddress(provider, poolKey);\\n        if (msg.sender != pool) {\\n            revert InvalidCallbackSender(pool, msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdea29c6b27fddc853d1033b0389901567d1c56219372dca43c7e1ab5a2fc1deb\",\"license\":\"MIT\"},\"contracts/flash-swap/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.25;\\n\\nimport { LiquidityProvider } from \\\"./common.sol\\\";\\n\\n/// @notice The identifying key of the pool\\nstruct PoolKey {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n}\\n\\n/// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n/// @param tokenA The first token of a pool, unsorted\\n/// @param tokenB The second token of a pool, unsorted\\n/// @param fee The fee level of the pool\\n/// @return Poolkey The pool details with ordered token0 and token1 assignments\\nfunction getPoolKey(address tokenA, address tokenB, uint24 fee) pure returns (PoolKey memory) {\\n    if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n    return PoolKey({ token0: tokenA, token1: tokenB, fee: fee });\\n}\\n\\n/// @notice Deterministically computes the pool address given the factory and PoolKey\\n/// @param factory The Uniswap V3 factory contract address\\n/// @param key The PoolKey\\n/// @return pool The contract address of the V3 pool\\nfunction computePoolAddress(address factory, bytes32 initCodeHash, PoolKey memory key) pure returns (address pool) {\\n    require(key.token0 < key.token1);\\n    pool = address(\\n        uint160(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        initCodeHash\\n                    )\\n                )\\n            )\\n        )\\n    );\\n}\\n\",\"keccak256\":\"0x7f6fdb31ff76a5b8799140f61f517088873a85468755b49b947bf83f9c03be3e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/flash-swap/common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n/// @notice An AMM providing liquidity for flash loans and flash swaps\\nenum LiquidityProvider {\\n    UNISWAP,\\n    PANCAKESWAP\\n}\\n\",\"keccak256\":\"0x983acd452547e53163e3c19f10c523157b61a2ee5613abac772e754db2875df7\",\"license\":\"MIT\"},\"contracts/operators/TokenConverterOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { IAbstractTokenConverter } from \\\"@venusprotocol/protocol-reserve/contracts/TokenConverter/IAbstractTokenConverter.sol\\\";\\n\\nimport { LiquidityProvider } from \\\"../flash-swap/common.sol\\\";\\nimport { FlashHandler } from \\\"../flash-swap/FlashHandler.sol\\\";\\nimport { ExactOutputFlashSwap } from \\\"../flash-swap/ExactOutputFlashSwap.sol\\\";\\nimport { Token } from \\\"../util/Token.sol\\\";\\nimport { checkDeadline, validatePath } from \\\"../util/validators.sol\\\";\\nimport { IPancakeSwapRouter } from \\\"../third-party/interfaces/IPancakeSwapRouter.sol\\\";\\nimport { IUniswapRouter } from \\\"../third-party/interfaces/IUniswapRouter.sol\\\";\\n\\n/// @title TokenConverterOperator\\n/// @notice Converts tokens in a TokenConverter using an exact-output flash swap\\n/// @dev Expects a reversed (exact output) path, i.e. the path starting with the token\\n///   that it _sends_ to TokenConverter and ends with the token that it _receives_ from\\n///   TokenConverter, e.g. if TokenConverter has BTC and wants USDT, the path should be\\n///   USDT->(TokenB)->(TokenC)->...->BTC. This contract will then:\\n///     1. Compute the amount of USDT required for the conversion\\n///     2. Flash-swap TokenB to USDT (`tokenToSendToConverter`)\\n///     3. Use TokenConverter to convert USDT to BTC (`tokenToReceiveFromConverter`)\\n///     4. Swap some portion of BTC to an exact amount of TokenB (`tokenToPay`)\\n///     5. Repay for the swap in TokenB\\n///     6. Transfer the rest of BTC to the caller\\n///   The exact output converter differs from an exact input version in that it sends the\\n///   income in `tokenToReceiveFromConverter` to the beneficiary, while an exact input\\n///   version would send the income in `tokenToSendToConverter`. The former is supposedly\\n///   a bit more efficient since there's no slippage associated with the income conversion.\\ncontract TokenConverterOperator is ExactOutputFlashSwap {\\n    /// @notice Conversion parameters\\n    struct ConversionParameters {\\n        /// @notice AMM providing liquidity (either Uniswap or PancakeSwap)\\n        LiquidityProvider liquidityProvider;\\n        /// @notice The receiver of the arbitrage income\\n        address beneficiary;\\n        /// @notice The token currently in the TokenConverter\\n        Token tokenToReceiveFromConverter;\\n        /// @notice The amount (in `tokenToReceiveFromConverter` tokens) to receive as a result of conversion\\n        uint256 amount;\\n        /// @notice Minimal income to get from the arbitrage transaction (in `tokenToReceiveFromConverter`).\\n        ///   This value can be negative to indicate that the sender is willing to pay for the transaction\\n        ///   execution. In this case, abs(minIncome) will be withdrawn from the sender's wallet, the\\n        ///   arbitrage will be executed, and the excess  (if any) will be sent to the beneficiary.\\n        int256 minIncome;\\n        /// @notice The token the TokenConverter would get\\n        Token tokenToSendToConverter;\\n        /// @notice Address of the token converter contract to arbitrage\\n        IAbstractTokenConverter converter;\\n        /// @notice Reversed (exact output) path to trade from `tokenToReceiveFromConverter`\\n        /// to `tokenToSendToConverter`\\n        bytes path;\\n        /// @notice Deadline for the transaction execution\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Conversion data to pass between calls\\n    struct ConversionData {\\n        /// @notice The receiver of the arbitrage income\\n        address beneficiary;\\n        /// @notice The token the TokenConverter would receive\\n        Token tokenToSendToConverter;\\n        /// @notice The amount (in `amountToSendToConverter` tokens) to send to converter\\n        uint256 amountToSendToConverter;\\n        /// @notice The token currently in the TokenConverter\\n        Token tokenToReceiveFromConverter;\\n        /// @notice The amount (in `tokenToReceiveFromConverter` tokens) to receive\\n        uint256 amountToReceiveFromConverter;\\n        /// @notice Minimal income to get from the arbitrage transaction (in `amountToReceiveFromConverter`).\\n        int256 minIncome;\\n        /// @notice Address of the token converter contract to arbitrage\\n        IAbstractTokenConverter converter;\\n    }\\n\\n    /// @notice Thrown if the amount of to receive from TokenConverter is less than expected\\n    /// @param expected Expected amount of tokens\\n    /// @param actual Actual amount of tokens\\n    error InsufficientLiquidity(uint256 expected, uint256 actual);\\n\\n    /// @notice Thrown on math underflow\\n    error Underflow();\\n\\n    /// @notice Thrown on math overflow\\n    error Overflow();\\n\\n    /// @param uniswapSwapRouter_ Uniswap SwapRouter contract\\n    /// @param pcsSwapRouter_ PancakeSwap SmartRouter contract\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(\\n        IUniswapRouter uniswapSwapRouter_,\\n        IPancakeSwapRouter pcsSwapRouter_\\n    ) FlashHandler(uniswapSwapRouter_, pcsSwapRouter_) {}\\n\\n    /// @notice Converts tokens in a TokenConverter using a flash swap\\n    /// @param params Conversion parameters\\n    function convert(ConversionParameters calldata params) external {\\n        checkDeadline(params.deadline);\\n        validatePath(params.path, params.tokenToSendToConverter.addr(), params.tokenToReceiveFromConverter.addr());\\n\\n        (uint256 amountToReceive, uint256 amountToPay) = params.converter.getUpdatedAmountIn(\\n            params.amount,\\n            params.tokenToSendToConverter.addr(),\\n            params.tokenToReceiveFromConverter.addr()\\n        );\\n        if (params.amount != amountToReceive) {\\n            revert InsufficientLiquidity(params.amount, amountToReceive);\\n        }\\n\\n        if (params.minIncome < 0) {\\n            params.tokenToReceiveFromConverter.transferToSelf(msg.sender, _u(-params.minIncome));\\n        }\\n\\n        ConversionData memory data = ConversionData({\\n            beneficiary: params.beneficiary,\\n            tokenToSendToConverter: params.tokenToSendToConverter,\\n            amountToSendToConverter: amountToPay,\\n            tokenToReceiveFromConverter: params.tokenToReceiveFromConverter,\\n            amountToReceiveFromConverter: amountToReceive,\\n            minIncome: params.minIncome,\\n            converter: params.converter\\n        });\\n\\n        _flashSwap(params.liquidityProvider, amountToPay, params.path, abi.encode(data));\\n    }\\n\\n    function _onMoneyReceived(bytes memory data) internal override returns (Token tokenIn, uint256 maxAmountIn) {\\n        ConversionData memory decoded = abi.decode(data, (ConversionData));\\n\\n        uint256 receivedAmount = _convertViaTokenConverter(\\n            decoded.converter,\\n            decoded.tokenToSendToConverter,\\n            decoded.tokenToReceiveFromConverter,\\n            decoded.amountToReceiveFromConverter\\n        );\\n\\n        return (decoded.tokenToReceiveFromConverter, _u(_i(receivedAmount) - decoded.minIncome));\\n    }\\n\\n    function _onFlashCompleted(bytes memory data) internal override {\\n        ConversionData memory decoded = abi.decode(data, (ConversionData));\\n        decoded.tokenToReceiveFromConverter.transferAll(decoded.beneficiary);\\n    }\\n\\n    /// @dev Get `tokenToReceive` from TokenConverter, paying with `tokenToPay`\\n    /// @param converter TokenConverter contract\\n    /// @param tokenToPay Token to be sent to TokenConverter\\n    /// @param tokenToReceive Token to be received from TokenConverter\\n    /// @param amountToReceive Amount to receive from TokenConverter in `tokenToReceive` tokens\\n    function _convertViaTokenConverter(\\n        IAbstractTokenConverter converter,\\n        Token tokenToPay,\\n        Token tokenToReceive,\\n        uint256 amountToReceive\\n    ) internal returns (uint256) {\\n        uint256 balanceBefore = tokenToReceive.balanceOfSelf();\\n        uint256 maxAmountToPay = tokenToPay.balanceOfSelf();\\n\\n        tokenToPay.approve(address(converter), maxAmountToPay);\\n        converter.convertForExactTokens(\\n            maxAmountToPay,\\n            amountToReceive,\\n            tokenToPay.addr(),\\n            tokenToReceive.addr(),\\n            address(this)\\n        );\\n        tokenToPay.approve(address(converter), 0);\\n        uint256 tokensReceived = tokenToReceive.balanceOfSelf() - balanceBefore;\\n        return tokensReceived;\\n    }\\n\\n    function _u(int256 value) private pure returns (uint256) {\\n        if (value < 0) {\\n            revert Underflow();\\n        }\\n        return uint256(value);\\n    }\\n\\n    function _i(uint256 value) private pure returns (int256) {\\n        if (value > uint256(type(int256).max)) {\\n            revert Overflow();\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x04f4ea8b44cea3fffcf241a280004320a2a82fb14c77bb05416cfc79a4f9cd3e\",\"license\":\"MIT\"},\"contracts/third-party/interfaces/IPancakeSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { IRouter } from \\\"../interfaces/IRouter.sol\\\";\\n\\ninterface IPancakeSwapRouter is IRouter {\\n    function deployer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcd9d968080e3812ca31834c8dc78ae300ac71fb945d4385fa6c738fd72296c95\",\"license\":\"MIT\"},\"contracts/third-party/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IPool {\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback, either pancakeV3SwapCallback or uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback, either pancakeV3SwapCallback or uniswapV3SwapCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9bcd43c38b2baf1df5dd42a4167281b9f8c07c7ea6dd8944185f842c6ef73be3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/third-party/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IRouter {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    function WETH9() external view returns (address);\\n}\",\"keccak256\":\"0xfcbaa09349bb3822246e7b783696fd43a13d33070fe6aa0ddd800d3a985e81da\",\"license\":\"MIT\"},\"contracts/third-party/interfaces/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { IRouter } from \\\"../interfaces/IRouter.sol\\\";\\n\\ninterface IUniswapRouter is IRouter {\\n    function factory() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7cde0a838db83d6c13a535a75cffa57346aa9f438338c740c20c303a21047f41\",\"license\":\"MIT\"},\"contracts/third-party/pancakeswap-v8/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xa60a0ea3a30b035f671b897a86ffc37025c6d7a4f01527a957fb68026bacd5ae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/third-party/pancakeswap-v8/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path) internal pure returns (address tokenA, address tokenB, uint24 fee) {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x312ef4ad598b667d5fe6f860c2947cbe2c9da923ad5c923acb08ccc0f7129a2d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/third-party/pancakeswap-v8/constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.5.0;\\n\\n/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\nuint160 constant MIN_SQRT_RATIO = 4295128739;\\n/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\nuint160 constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\",\"keccak256\":\"0x0a77c9316967a70312a7925e964d7fdf36bcb3e406ec72e05d85dc0a294779ec\",\"license\":\"GPL-2.0-or-later\"},\"contracts/util/Token.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n// A utility library for handling token transfers. Instead of extending IERC20 interface,\\n// introduces a new `Token` type with most of the operations \\\"done right\\\", e.g. it uses\\n// a reverting version of `approve` and `transfer`. It also has some utility methods like\\n// balanceOfSelf and transferAll that has proven to be useful in our contracts.\\n//\\n// The library exposes addr() and ierc20() methods to simplify the conversion to\\n// other kinds of ERC20 token types commonly used in contracts.\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { approveOrRevert } from \\\"./approveOrRevert.sol\\\";\\n\\ntype Token is address;\\n\\nlibrary TokenLibrary {\\n    using TokenLibrary for Token;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Approves the specified amount or reverts. Handles non-compliant tokens.\\n     * @param token Token\\n     * @param spender The account approved to spend the tokens\\n     * @param amount The approved amount\\n     */\\n    function approve(Token token, address spender, uint256 amount) internal {\\n        approveOrRevert(IERC20(token.addr()), spender, amount);\\n    }\\n\\n    /**\\n     * @dev Wrapper for SafeERC20.safeTransfer\\n     * @param token Token\\n     * @param receiver The account that would receive the tokens\\n     * @param amount The amount to transfer\\n     */\\n    function transfer(Token token, address receiver, uint256 amount) internal {\\n        token.ierc20().safeTransfer(receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Wrapper for SafeERC20.safeTransferFrom\\n     * @param token Token\\n     * @param receiver The account that would receive the tokens\\n     * @param amount The amount to transfer\\n     */\\n    function transferFrom(Token token, address payer, address receiver, uint256 amount) internal {\\n        token.ierc20().safeTransferFrom(payer, receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Transfer from payer to address(this)\\n     * @param token Token\\n     * @param amount The amount to transfer\\n     */\\n    function transferToSelf(Token token, address payer, uint256 amount) internal {\\n        token.transferFrom(payer, address(this), amount);\\n    }\\n\\n    /**\\n     * @dev Transfers the entire contract's balance to the receiver\\n     * @param token Token\\n     * @param receiver The account that would receive the tokens\\n     */\\n    function transferAll(Token token, address receiver) internal {\\n        uint256 balance = token.balanceOfSelf();\\n        if (balance > 0) {\\n            token.transfer(receiver, balance);\\n        }\\n    }\\n\\n    function balanceOf(Token token, address account) internal view returns (uint256) {\\n        return token.ierc20().balanceOf(account);\\n    }\\n\\n    function balanceOfSelf(Token token) internal view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function addr(Token token) internal pure returns (address) {\\n        return Token.unwrap(token);\\n    }\\n\\n    function ierc20(Token token) internal pure returns (IERC20) {\\n        return IERC20(token.addr());\\n    }\\n}\\n\\nusing TokenLibrary for Token global;\\n\\nfunction eq(Token a, Token b) pure returns (bool) {\\n    return a.addr() == b.addr();\\n}\\n\\nfunction neq(Token a, Token b) pure returns (bool) {\\n    return a.addr() != b.addr();\\n}\\n\\nusing { eq as == } for Token global;\\nusing { neq as != } for Token global;\\n\",\"keccak256\":\"0x0eefbdd9159ed3c1110ff6a40fbf8bd2ba3d19090d0f8603e9c5806dd4d3aa33\",\"license\":\"BSD-3-Clause\"},\"contracts/util/approveOrRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Thrown if a contract is unable to approve a transfer\\nerror ApproveFailed();\\n\\n/// @notice Approves a transfer, ensuring that it is successful. This function supports non-compliant\\n/// tokens like the ones that don't return a boolean value on success. Thus, such approve call supports\\n/// three different kinds of tokens:\\n///   * Compliant tokens that revert on failure\\n///   * Compliant tokens that return false on failure\\n///   * Non-compliant tokens that don't return a value\\n/// @param token The contract address of the token which will be transferred\\n/// @param spender The spender contract address\\n/// @param amount The value of the transfer\\nfunction approveOrRevert(IERC20 token, address spender, uint256 amount) {\\n    bytes memory callData = abi.encodeCall(token.approve, (spender, amount));\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = address(token).call(callData);\\n\\n    if (!success || (result.length != 0 && !abi.decode(result, (bool)))) {\\n        revert ApproveFailed();\\n    }\\n}\\n\",\"keccak256\":\"0xcdf5e4d992566b97e89d9bb70d42a781ef2d11ada1551a9fbbb0140d7a56ce3a\",\"license\":\"MIT\"},\"contracts/util/validators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { BytesLib } from \\\"../third-party/pancakeswap-v8/BytesLib.sol\\\";\\n\\n/// @notice Thrown if the provided swap path start does not correspond to the expected one\\n/// @param expected Expected swap path start\\n/// @param actual Provided swap path start\\nerror InvalidSwapStart(address expected, address actual);\\n\\n/// @notice Thrown if the provided swap path end does not correspond to the expected one\\n/// @param expected Expected swap path end\\n/// @param actual Provided swap path end\\nerror InvalidSwapEnd(address expected, address actual);\\n\\n/// @notice Thrown if the deadline has passed\\nerror DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n\\n/// @notice Checks if swap path starts with `expectedPathStart`, reverts otherwise.\\n/// @param expectedPathStart Expected swap path start\\nfunction validatePathStart(bytes calldata path, address expectedPathStart) pure {\\n    address swapStart = BytesLib.toAddress(path, 0);\\n    if (swapStart != expectedPathStart) {\\n        revert InvalidSwapStart(expectedPathStart, swapStart);\\n    }\\n}\\n\\n/// @notice Checks if swap path ends with `expectedPathEnd`, reverts otherwise.\\n/// @param expectedPathEnd Expected swap path end\\nfunction validatePathEnd(bytes calldata path, address expectedPathEnd) pure {\\n    address swapEnd = BytesLib.toAddress(path, path.length - 20);\\n    if (swapEnd != expectedPathEnd) {\\n        revert InvalidSwapEnd(expectedPathEnd, swapEnd);\\n    }\\n}\\n\\n/// @notice Checks if swap path starts with `expectedPathStart` and ends with `expectedPathEnd`,\\n///   reverts if either of the checks is not successful.\\n/// @param expectedPathStart Expected swap path start\\n/// @param expectedPathEnd Expected swap path end\\nfunction validatePath(bytes calldata path, address expectedPathStart, address expectedPathEnd) pure {\\n    validatePathStart(path, expectedPathStart);\\n    validatePathEnd(path, expectedPathEnd);\\n}\\n\\n/// @notice Check whether the current timestamp is less than or equal to the specified\\n///   deadline, reverts otherwise.\\n/// @param deadline The deadline to check against\\nfunction checkDeadline(uint256 deadline) view {\\n    if (deadline < block.timestamp) {\\n        revert DeadlinePassed(block.timestamp, deadline);\\n    }\\n}\\n\",\"keccak256\":\"0x9656f1067defadc06e24c1bd33180af4b79099d4c57755651338bdd129366e29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051611ea8380380611ea8833981016040819052610030916101a3565b81816001600160a01b03821615801561005057506001600160a01b038116155b1561006e576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b038216156100f8576001600160a01b03821660c08190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa1580156100c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100eb91906101dd565b6001600160a01b031660e0525b6001600160a01b03811615610182576001600160a01b038116608081905260408051631abe729160e31b8152905163d5f39488916004808201926020929091908290030181865afa158015610151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017591906101dd565b6001600160a01b031660a0525b50505050610201565b6001600160a01b03811681146101a057600080fd5b50565b600080604083850312156101b657600080fd5b82516101c18161018b565b60208401519092506101d28161018b565b809150509250929050565b6000602082840312156101ef57600080fd5b81516101fa8161018b565b9392505050565b60805160a05160c05160e051611c54610254600039600081816101060152610c53015260008181610140015261090501526000818160df0152610ca5015260008181608701526108df0152611c546000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c74c0fac1161005b578063c74c0fac14610101578063cbb4ed3914610128578063d82649201461013b578063fa461e331461016257600080fd5b806302ee17ad1461008257806323a69e75146100c55780638f63f9bd146100da575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100d86100d33660046115a0565b610175565b005b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100d8610136366004611620565b610189565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100d86101703660046115a0565b610459565b610183600185858585610463565b50505050565b61019781610100013561055b565b6101de6101a760e083018361165c565b6101c66101ba60c0860160a087016116bf565b6001600160a01b031690565b6101d96101ba60608701604088016116bf565b610588565b6000806101f160e0840160c085016116bf565b6001600160a01b0316636f1a30a860608501356102176101ba60c0880160a089016116bf565b61022a6101ba6060890160408a016116bf565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b03918216602484015216604482015260640160408051808303816000875af115801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a191906116dc565b91509150818360600135146102db5760405163a17e11d560e01b815260608401356004820152602481018390526044015b60405180910390fd5b60008360800135121561032157610321336103016102fc6080870135611716565b61059e565b61031160608701604088016116bf565b6001600160a01b031691906105c5565b60006040518060e0016040528085602001602081019061034191906116bf565b6001600160a01b0316815260200161035f60c0870160a088016116bf565b6001600160a01b0316815260200183815260200185604001602081019061038691906116bf565b6001600160a01b0316815260208101859052608086013560408201526060016103b560e0870160c088016116bf565b6001600160a01b0316905290506101836103d26020860186611732565b836103e060e088018861165c565b85604051602001610445919081516001600160a01b039081168252602080840151821690830152604080840151908301526060808401518216908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b6040516020818303038152906040526105df565b6101836000858585855b60006104718284018461181f565b90506104818682604001516107a4565b60008513158015610493575060008413155b156104b15760405163b494d17560e01b815260040160405180910390fd5b60008060008713156104cc57505060408101515185906104e3565b60008613156104e357505060408101516020015184905b6000806104f385602001516107ec565b915091506105048560000151610852565b1561052e576000610518866000015161088c565b90506105288b82338887876108c3565b50610542565b6105426001600160a01b03841633866109e9565b61054f8560200151610a10565b50505050505050505050565b428110156105855760405163041f95d160e51b8152426004820152602481018290526044016102d2565b50565b610593848484610a47565b610183848483610acf565b6000808212156105c15760405163caccb6d960e01b815260040160405180910390fd5b5090565b6105da6001600160a01b038416833084610b64565b505050565b600080600061062386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b8d92505050565b9250925092506000610636848484610bc9565b905060006106448a83610c34565b9050600060405180606001604052808a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060208082018a9052604091820186905290516106a992910161196d565b60405160208183030381529060405290506000866001600160a01b031684602001516001600160a01b0316149050600081610702576106fd600173fffd8963efd1fc6a506488495d951d5263988d266119e3565b610712565b6107126401000276a36001611a0a565b9050836001600160a01b031663128acb0830848f61072f90611716565b85886040518663ffffffff1660e01b8152600401610751959493929190611a2a565b60408051808303816000875af115801561076f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079391906116dc565b505050505050505050505050505050565b60006107b08383610c34565b9050336001600160a01b038216146105da5760405163a415aad560e01b81526001600160a01b03821660048201523360248201526044016102d2565b6000806000838060200190518101906108059190611a65565b905060006108258260c00151836020015184606001518560800151610ceb565b905081606001516108478360a0015161083d84610e21565b6102fc9190611b0a565b935093505050915091565b600061086060036014611b2a565b601461086d600382611b2a565b6108779190611b2a565b6108819190611b2a565b825110159050919050565b60606108bd61089d60036014611b2a565b6108a960036014611b2a565b84516108b59190611b3d565b849190610e4b565b92915050565b6000808760018111156108d8576108d8611b50565b14610903577f0000000000000000000000000000000000000000000000000000000000000000610925565b7f00000000000000000000000000000000000000000000000000000000000000005b905061093b6001600160a01b0384168284610f58565b604080516080810182528781526001600160a01b0387811660208301528183018790526060820185905291516304dc09a360e11b8152918316916309b813469161098791600401611b66565b6020604051808303816000875af11580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190611bb4565b506109e06001600160a01b038416826000610f58565b50505050505050565b6105da8282610a00866001600160a01b0316610f6c565b6001600160a01b03169190610f7d565b600081806020019051810190610a269190611a65565b80516060820151919250610a43916001600160a01b031690610fe0565b5050565b6000610a8884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611010915050565b9050816001600160a01b0316816001600160a01b031614610183576040516339569fd760e11b81526001600160a01b038084166004830152821660248201526044016102d2565b6000610b1d84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b18925060149150879050611b3d565b611010565b9050816001600160a01b0316816001600160a01b03161461018357604051632d5a499f60e01b81526001600160a01b038084166004830152821660248201526044016102d2565b610183838383610b7c886001600160a01b0316610f6c565b6001600160a01b0316929190611075565b60008080610b9b8482611010565b9250610ba88460146110ad565b9050610bc0610bb960036014611b2a565b8590611010565b91509193909250565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b03161115610c04579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600080836001811115610c4957610c49611b50565b03610ca057610c997f00000000000000000000000000000000000000000000000000000000000000007fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5484611158565b90506108bd565b610c997f00000000000000000000000000000000000000000000000000000000000000007f6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e284611158565b600080610d00846001600160a01b0316611218565b90506000610d16866001600160a01b0316611218565b9050610d2c6001600160a01b0387168883610f58565b866001600160a01b031663f04c31878286610d4d8a6001600160a01b031690565b6001600160a01b038a166040516001600160e01b031960e087901b168152600481019490945260248401929092526001600160a01b03908116604484015216606482015230608482015260a40160408051808303816000875af1158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc91906116dc565b50610df490506001600160a01b038716886000610f58565b600082610e09876001600160a01b0316611218565b610e139190611b3d565b93505050505b949350505050565b60006001600160ff1b038211156105c157604051631a93c68960e11b815260040160405180910390fd5b606081610e5981601f611b2a565b1015610e985760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102d2565b610ea28284611b2a565b84511015610ee65760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016102d2565b606082158015610f055760405191506000825260208201604052610f4f565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610f3e578051835260209283019201610f26565b5050858452601f01601f1916604052505b50949350505050565b6105da6001600160a01b038416838361122d565b60006001600160a01b0382166108bd565b6040516001600160a01b0383166024820152604481018290526105da90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611321565b6000610ff4836001600160a01b0316611218565b905080156105da576105da6001600160a01b03841683836109e9565b600061101d826014611b2a565b835110156110655760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016102d2565b500160200151600160601b900490565b6040516001600160a01b03808516602483015283166044820152606481018290526101839085906323b872dd60e01b90608401610fa9565b6000816110bb816003611b2a565b10156110fd5760405162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b60448201526064016102d2565b611108826003611b2a565b8351101561114f5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b60448201526064016102d2565b50016003015190565b600081602001516001600160a01b031682600001516001600160a01b03161061118057600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015295901b6bffffffffffffffffffffffff191660a183015260b582019490945260d5808201939093528151808203909301835260f5019052805191012090565b60006108bd6001600160a01b038316306113f6565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291519091600091829187169061128b908590611bcd565b6000604051808303816000865af19150503d80600081146112c8576040519150601f19603f3d011682016040523d82523d6000602084013e6112cd565b606091505b50915091508115806112fb57508051158015906112fb5750808060200190518101906112f99190611be9565b155b1561131957604051633e3f8f7360e01b815260040160405180910390fd5b505050505050565b6000611376826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661147d9092919063ffffffff16565b90508051600014806113975750808060200190518101906113979190611be9565b6105da5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d2565b600061140a836001600160a01b0316610f6c565b6040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa158015611452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114769190611bb4565b9392505050565b6060610e19848460008585600080866001600160a01b031685876040516114a49190611bcd565b60006040518083038185875af1925050503d80600081146114e1576040519150601f19603f3d011682016040523d82523d6000602084013e6114e6565b606091505b50915091506114f787838387611502565b979650505050505050565b6060831561157157825160000361156a576001600160a01b0385163b61156a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d2565b5081610e19565b610e1983838151156115865781518083602001fd5b8060405162461bcd60e51b81526004016102d29190611c0b565b600080600080606085870312156115b657600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156115dc57600080fd5b818701915087601f8301126115f057600080fd5b8135818111156115ff57600080fd5b88602082850101111561161157600080fd5b95989497505060200194505050565b60006020828403121561163257600080fd5b813567ffffffffffffffff81111561164957600080fd5b8201610120818503121561147657600080fd5b6000808335601e1984360301811261167357600080fd5b83018035915067ffffffffffffffff82111561168e57600080fd5b6020019150368190038213156116a357600080fd5b9250929050565b6001600160a01b038116811461058557600080fd5b6000602082840312156116d157600080fd5b8135611476816116aa565b600080604083850312156116ef57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820161172b5761172b611700565b5060000390565b60006020828403121561174457600080fd5b81356002811061147657600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561178c5761178c611753565b60405290565b600082601f8301126117a357600080fd5b813567ffffffffffffffff808211156117be576117be611753565b604051601f8301601f19908116603f011681019082821181831017156117e6576117e6611753565b816040528381528660208588010111156117ff57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561183157600080fd5b813567ffffffffffffffff8082111561184957600080fd5b9083019081850360a081121561185e57600080fd5b611866611769565b83358381111561187557600080fd5b61188188828701611792565b82525060208401358381111561189657600080fd5b6118a288828701611792565b6020830152506060603f19830112156118ba57600080fd5b6118c2611769565b9250604084013591506118d4826116aa565b9082526060830135906118e6826116aa565b8160208401526080840135935062ffffff8416841461190457600080fd5b8360408401528260408201528094505050505092915050565b60005b83811015611938578181015183820152602001611920565b50506000910152565b6000815180845261195981602086016020860161191d565b601f01601f19169290920160200192915050565b602081526000825160a0602084015261198960c0840182611941565b90506020840151601f198483030160408501526119a68282611941565b60409586015180516001600160a01b03908116606088015260208201511660808701529095015162ffffff1660a090940193909352509192915050565b6001600160a01b03828116828216039080821115611a0357611a03611700565b5092915050565b6001600160a01b03818116838216019080821115611a0357611a03611700565b6001600160a01b0386811682528515156020830152604082018590528316606082015260a0608082018190526000906114f790830184611941565b600060e08284031215611a7757600080fd5b60405160e0810181811067ffffffffffffffff82111715611a9a57611a9a611753565b6040528251611aa8816116aa565b81526020830151611ab8816116aa565b6020820152604083810151908201526060830151611ad5816116aa565b806060830152506080830151608082015260a083015160a082015260c0830151611afe816116aa565b60c08201529392505050565b8181036000831280158383131683831282161715611a0357611a03611700565b808201808211156108bd576108bd611700565b818103818111156108bd576108bd611700565b634e487b7160e01b600052602160045260246000fd5b602081526000825160806020840152611b8260a0840182611941565b905060018060a01b03602085015116604084015260408401516060840152606084015160808401528091505092915050565b600060208284031215611bc657600080fd5b5051919050565b60008251611bdf81846020870161191d565b9190910192915050565b600060208284031215611bfb57600080fd5b8151801515811461147657600080fd5b602081526000611476602083018461194156fea264697066735822122025ed08dc49cc718ccc7a6168d8261ab75b8cc502dea91d75f0af8ac8d109483f64736f6c63430008190033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Expects a reversed (exact output) path, i.e. the path starting with the token   that it _sends_ to TokenConverter and ends with the token that it _receives_ from   TokenConverter, e.g. if TokenConverter has BTC and wants USDT, the path should be   USDT->(TokenB)->(TokenC)->...->BTC. This contract will then:     1. Compute the amount of USDT required for the conversion     2. Flash-swap TokenB to USDT (`tokenToSendToConverter`)     3. Use TokenConverter to convert USDT to BTC (`tokenToReceiveFromConverter`)     4. Swap some portion of BTC to an exact amount of TokenB (`tokenToPay`)     5. Repay for the swap in TokenB     6. Transfer the rest of BTC to the caller   The exact output converter differs from an exact input version in that it sends the   income in `tokenToReceiveFromConverter` to the beneficiary, while an exact input   version would send the income in `tokenToSendToConverter`. The former is supposedly   a bit more efficient since there's no slippage associated with the income conversion.",
    "errors": {
      "InsufficientLiquidity(uint256,uint256)": [
        {
          "params": {
            "actual": "Actual amount of tokens",
            "expected": "Expected amount of tokens"
          }
        }
      ],
      "InvalidCallbackSender(address,address)": [
        {
          "params": {
            "actual": "Actual callback sender",
            "expected": "Expected callback sender (pool address computed based on the pool key)"
          }
        }
      ],
      "InvalidSwapEnd(address,address)": [
        {
          "params": {
            "actual": "Provided swap path end",
            "expected": "Expected swap path end"
          }
        }
      ],
      "InvalidSwapStart(address,address)": [
        {
          "params": {
            "actual": "Provided swap path start",
            "expected": "Expected swap path start"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "pcsSwapRouter_": "PancakeSwap SmartRouter contract",
          "uniswapSwapRouter_": "Uniswap SwapRouter contract"
        }
      },
      "convert((uint8,address,address,uint256,int256,address,address,bytes,uint256))": {
        "params": {
          "params": "Conversion parameters"
        }
      },
      "pancakeV3SwapCallback(int256,int256,bytes)": {
        "params": {
          "amount0Delta": "Amount of pool's token0 to repay for the flash swap (negative if no need to repay this token)",
          "amount1Delta": "Amount of pool's token1 to repay for the flash swap (negative if no need to repay this token)",
          "data": "Callback data containing an Envelope structure"
        }
      },
      "uniswapV3SwapCallback(int256,int256,bytes)": {
        "params": {
          "amount0Delta": "Amount of pool's token0 to repay for the flash swap (negative if no need to repay this token)",
          "amount1Delta": "Amount of pool's token1 to repay for the flash swap (negative if no need to repay this token)",
          "data": "Callback data containing an Envelope structure"
        }
      }
    },
    "title": "TokenConverterOperator",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApproveFailed()": [
        {
          "notice": "Thrown if a contract is unable to approve a transfer"
        }
      ],
      "DeadlinePassed(uint256,uint256)": [
        {
          "notice": "Thrown if the deadline has passed"
        }
      ],
      "EmptySwap()": [
        {
          "notice": "Thrown if the swap callback is called with unexpected or zero amount of tokens"
        }
      ],
      "InsufficientLiquidity(uint256,uint256)": [
        {
          "notice": "Thrown if the amount of to receive from TokenConverter is less than expected"
        }
      ],
      "InvalidCallbackSender(address,address)": [
        {
          "notice": "Thrown if operation callback is called by a non-PancakeSwap contract"
        }
      ],
      "InvalidSwapEnd(address,address)": [
        {
          "notice": "Thrown if the provided swap path end does not correspond to the expected one"
        }
      ],
      "InvalidSwapStart(address,address)": [
        {
          "notice": "Thrown if the provided swap path start does not correspond to the expected one"
        }
      ],
      "Overflow()": [
        {
          "notice": "Thrown on math overflow"
        }
      ],
      "Underflow()": [
        {
          "notice": "Thrown on math underflow"
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "PCS_DEPLOYER()": {
        "notice": "PancakeSwap deployer contract"
      },
      "PCS_ROUTER()": {
        "notice": "PancakeSwap SmartRouter contract"
      },
      "UNISWAP_FACTORY()": {
        "notice": "Uniswap factory contract"
      },
      "UNISWAP_ROUTER()": {
        "notice": "Uniswap SwapRouter contract"
      },
      "convert((uint8,address,address,uint256,int256,address,address,bytes,uint256))": {
        "notice": "Converts tokens in a TokenConverter using a flash swap"
      },
      "pancakeV3SwapCallback(int256,int256,bytes)": {
        "notice": "Callback called by PancakeSwap pool during flash swap conversion"
      },
      "uniswapV3SwapCallback(int256,int256,bytes)": {
        "notice": "Callback called by PancakeSwap pool during flash swap conversion"
      }
    },
    "notice": "Converts tokens in a TokenConverter using an exact-output flash swap",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
